{"version":3,"file":"static/js/886.e15f6429.chunk.js","mappings":"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","sources":["components/Filter/Filter.tsx","components/Header/Header.tsx","components/AddContactForm/AddContactForm.tsx","components/ContactsListItem/ContactsListItem.tsx","components/ContactsList/ContactsList.tsx","components/UpdateContactForm/UpdateContactForm.tsx","pages/Home/Home.tsx"],"sourcesContent":["import { useAppDispatch, useAppSelector } from 'hooks';\nimport { setFilter } from 'redux/contacts/slice';\nimport { TextField, Box } from '@mui/material';\n\nconst Filter: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const filter = useAppSelector(state => state.contacts.filter);\n\n  return (\n    <Box>\n      <TextField\n        type=\"text\"\n        label=\"Find contacts by name\"\n        variant=\"outlined\"\n        size=\"small\"\n        fullWidth\n        value={filter}\n        onChange={e => dispatch(setFilter(e.target.value))}\n      />\n    </Box>\n  );\n};\n\nexport default Filter;\n","import { useAppDispatch, useAppSelector } from 'hooks';\nimport { logout } from 'redux/auth/operations';\nimport { Button, Typography, Container, Box, Stack } from '@mui/material';\nimport Filter from 'components/Filter/Filter';\nimport LogoutRoundedIcon from '@mui/icons-material/LogoutRounded';\nimport ContactPhoneRoundedIcon from '@mui/icons-material/ContactPhoneRounded';\n\nconst Header: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const user = useAppSelector(state => state.auth.user);\n\n  return (\n    <Box component=\"header\" pt={4} pb={4} boxShadow={1}>\n      <Container>\n        <Stack\n          direction={{ sm: 'row' }}\n          alignItems=\"center\"\n          justifyContent=\"space-between\"\n        >\n          <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n            <ContactPhoneRoundedIcon fontSize=\"large\" color=\"primary\" />\n            <Typography component=\"h1\" variant=\"h6\" color=\"primary\">\n              ContactsHub\n            </Typography>\n          </Stack>\n          <Filter />\n          <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n            <Typography>{user.name}</Typography>\n            <Button\n              type=\"button\"\n              variant=\"outlined\"\n              color=\"primary\"\n              startIcon={<LogoutRoundedIcon />}\n              onClick={() => dispatch(logout())}\n            >\n              logout\n            </Button>\n          </Stack>\n        </Stack>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Header;\n","import { useState, useRef, useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from 'hooks';\nimport { createContact } from 'redux/contacts/operations';\nimport { toggleAddContactModal } from 'redux/global/slice';\nimport { INewContact } from 'types/types';\nimport { Box, Button, TextField, Stack, Typography } from '@mui/material';\n\nconst AddContactForm: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const contacts = useAppSelector(state => state.contacts.items);\n  const isLoading = useAppSelector(state => state.contacts.isLoading);\n\n  const [contact, setContact] = useState<INewContact>({\n    name: '',\n    number: '',\n  });\n\n  const input = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (input.current) {\n      input.current.focus();\n    }\n  }, []);\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setContact(prev => {\n      return { ...prev, [e.target.name]: e.target.value };\n    });\n  };\n\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (contacts.some(prevContact => prevContact.name === contact.name)) {\n      alert('Error');\n      return;\n    }\n\n    dispatch(createContact(contact));\n    dispatch(toggleAddContactModal());\n  };\n\n  return (\n    <Box\n      height=\"100%\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Box p={6} width={{ xs: 340, sm: 400 }}>\n        <Typography component=\"h2\" variant=\"h5\" align=\"center\" mb={2}>\n          Add new contact\n        </Typography>\n        <form onSubmit={onSubmit}>\n          <Stack spacing={2}>\n            <TextField\n              type=\"text\"\n              name=\"name\"\n              label=\"Contact Name\"\n              variant=\"outlined\"\n              size=\"small\"\n              fullWidth\n              value={contact.name}\n              onChange={onChange}\n              required\n              inputRef={input}\n            />\n            <TextField\n              type=\"tel\"\n              name=\"number\"\n              label=\"Contact Number\"\n              variant=\"outlined\"\n              size=\"small\"\n              fullWidth\n              value={contact.number}\n              onChange={onChange}\n              required\n            />\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n              disabled={isLoading}\n            >\n              Create\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outlined\"\n              fullWidth\n              onClick={() => dispatch(toggleAddContactModal())}\n            >\n              Cancel\n            </Button>\n          </Stack>\n        </form>\n      </Box>\n    </Box>\n  );\n};\n\nexport default AddContactForm;\n","import { useAppDispatch, useAppSelector } from 'hooks';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { setContactToUpdate } from 'redux/contacts/slice';\nimport { toggleUpdateContactModal } from 'redux/global/slice';\nimport { IContact } from 'types/types';\nimport {\n  Button,\n  ButtonGroup,\n  Typography,\n  Stack,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n} from '@mui/material';\nimport DeleteRoundedIcon from '@mui/icons-material/DeleteRounded';\nimport ChangeCircleRoundedIcon from '@mui/icons-material/ChangeCircleRounded';\nimport AccountCircleRoundedIcon from '@mui/icons-material/AccountCircleRounded';\nimport PhoneAndroidRoundedIcon from '@mui/icons-material/PhoneAndroidRounded';\n\nconst ContactsListItem: React.FC<IContact> = ({ id, name, number }) => {\n  const dispatch = useAppDispatch();\n\n  const isLoading = useAppSelector(state => state.contacts.isLoading);\n\n  const onUpdateBtnClick = () => {\n    dispatch(setContactToUpdate({ id, name, number }));\n    dispatch(toggleUpdateContactModal());\n  };\n\n  return (\n    <Grid item component=\"li\" xs={12} sm={6} md={4} lg={3}>\n      <Card variant=\"outlined\">\n        <CardContent>\n          <Stack spacing={2}>\n            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n              <AccountCircleRoundedIcon fontSize=\"large\" />\n              <Typography component=\"p\" variant=\"h6\">\n                {name}\n              </Typography>\n            </Stack>\n            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n              <PhoneAndroidRoundedIcon fontSize=\"large\" />\n              <Typography component=\"p\" variant=\"h6\">\n                {number}\n              </Typography>\n            </Stack>\n          </Stack>\n        </CardContent>\n        <CardActions>\n          <ButtonGroup color=\"primary\" fullWidth>\n            <Button\n              type=\"button\"\n              variant=\"contained\"\n              disableElevation\n              startIcon={<ChangeCircleRoundedIcon />}\n              onClick={onUpdateBtnClick}\n            >\n              Change\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outlined\"\n              disabled={isLoading}\n              startIcon={<DeleteRoundedIcon />}\n              onClick={() => dispatch(deleteContact(id))}\n            >\n              Delete\n            </Button>\n          </ButtonGroup>\n        </CardActions>\n      </Card>\n    </Grid>\n  );\n};\n\nexport default ContactsListItem;\n","import { useAppSelector } from 'hooks';\nimport ContactsListItem from 'components/ContactsListItem/ContactsListItem';\nimport { Grid, Box } from '@mui/material';\n\nconst ContactsList: React.FC = () => {\n  const contacts = useAppSelector(state => state.contacts.items);\n  const filter = useAppSelector(state => state.contacts.filter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name\n      .trim()\n      .toLocaleLowerCase()\n      .includes(filter.trim().toLocaleLowerCase())\n  );\n\n  return (\n    <Box component=\"main\">\n      <Grid container component=\"ul\" spacing={4}>\n        {filteredContacts.map(({ id, name, number }) => {\n          return (\n            <ContactsListItem key={id} id={id} name={name} number={number} />\n          );\n        })}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default ContactsList;\n","import { useState, useRef, useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from 'hooks';\nimport { updateContact } from 'redux/contacts/operations';\nimport { toggleUpdateContactModal } from 'redux/global/slice';\nimport { IContact } from 'types/types';\nimport { Box, Button, TextField, Stack, Typography } from '@mui/material';\n\nconst UpdateContactForm: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const contacts = useAppSelector(state => state.contacts.items);\n  const contactToUpdate = useAppSelector(\n    state => state.contacts.contactToUpdate\n  );\n  const isLoading = useAppSelector(state => state.contacts.isLoading);\n\n  const [updatedContact, setUpdatedContact] =\n    useState<IContact>(contactToUpdate);\n\n  const input = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (input.current) {\n      input.current.focus();\n    }\n  }, []);\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setUpdatedContact({\n      ...updatedContact,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (contacts.some(contact => contact.name === updatedContact.name)) {\n      alert('Error');\n      return;\n    }\n\n    dispatch(updateContact(updatedContact));\n    dispatch(toggleUpdateContactModal());\n  };\n\n  return (\n    <Box\n      height=\"100%\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Box p={6} width={{ xs: 340, sm: 400 }}>\n        <Typography component=\"h2\" variant=\"h5\" align=\"center\" mb={2}>\n          Update contact\n        </Typography>\n        <form onSubmit={onSubmit}>\n          <Stack spacing={2}>\n            <TextField\n              type=\"text\"\n              name=\"name\"\n              label=\"Change Name\"\n              variant=\"outlined\"\n              size=\"small\"\n              fullWidth\n              value={updatedContact.name}\n              onChange={onChange}\n              required\n              inputRef={input}\n            />\n            <TextField\n              type=\"tel\"\n              name=\"number\"\n              label=\"Change Number\"\n              variant=\"outlined\"\n              size=\"small\"\n              fullWidth\n              value={updatedContact.number}\n              onChange={onChange}\n              required\n            />\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n              disabled={isLoading}\n            >\n              Change\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outlined\"\n              fullWidth\n              onClick={() => dispatch(toggleUpdateContactModal())}\n            >\n              Cancel\n            </Button>\n          </Stack>\n        </form>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UpdateContactForm;\n","import { useEffect } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAppDispatch, useAppSelector } from 'hooks';\nimport { getContacts } from 'redux/contacts/operations';\nimport Header from 'components/Header/Header';\nimport AddContactForm from 'components/AddContactForm/AddContactForm';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport UpdateContactForm from 'components/UpdateContactForm/UpdateContactForm';\nimport {\n  toggleAddContactModal,\n  toggleUpdateContactModal,\n} from 'redux/global/slice';\nimport { Container, Box, Dialog, Button } from '@mui/material';\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { useTheme } from '@mui/material/styles';\n\nconst Home: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn);\n  const isAddContactModalOpen = useAppSelector(\n    state => state.global.isAddContactModalOpen\n  );\n  const isUpdateContactModalOpen = useAppSelector(\n    state => state.global.isUpdateContactModalOpen\n  );\n\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  if (!isLoggedIn) {\n    return <Navigate to=\"/login\" replace />;\n  }\n\n  return (\n    <Box>\n      <Header />\n      <Box component=\"main\" pt={4} pb={4}>\n        <Container>\n          <Dialog\n            fullScreen={fullScreen}\n            open={isAddContactModalOpen}\n            onClose={() => dispatch(toggleAddContactModal())}\n          >\n            <AddContactForm />\n          </Dialog>\n          <Dialog\n            fullScreen={fullScreen}\n            open={isUpdateContactModalOpen}\n            onClose={() => dispatch(toggleUpdateContactModal())}\n          >\n            <UpdateContactForm />\n          </Dialog>\n          <ContactsList />\n          <Box position=\"fixed\" bottom=\"40px\" right=\"40px\">\n            <Button\n              type=\"button\"\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<AddCircleRoundedIcon />}\n              onClick={() => dispatch(toggleAddContactModal())}\n            >\n              Add contact\n            </Button>\n          </Box>\n        </Container>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Home;\n"],"names":["dispatch","useAppDispatch","filter","useAppSelector","state","contacts","_jsx","Box","children","TextField","type","label","variant","size","fullWidth","value","onChange","e","setFilter","target","user","auth","component","pt","pb","boxShadow","Container","_jsxs","Stack","direction","sm","alignItems","justifyContent","spacing","ContactPhoneRoundedIcon","fontSize","color","Typography","Filter","name","Button","startIcon","LogoutRoundedIcon","onClick","logout","items","isLoading","_useState","useState","number","_useState2","_slicedToArray","contact","setContact","input","useRef","useEffect","current","focus","prev","_objectSpread","_defineProperty","height","display","p","width","xs","align","mb","onSubmit","preventDefault","some","prevContact","alert","createContact","toggleAddContactModal","required","inputRef","disabled","_ref","id","Grid","item","md","lg","Card","CardContent","AccountCircleRoundedIcon","PhoneAndroidRoundedIcon","CardActions","ButtonGroup","disableElevation","ChangeCircleRoundedIcon","setContactToUpdate","toggleUpdateContactModal","DeleteRoundedIcon","deleteContact","filteredContacts","trim","toLocaleLowerCase","includes","container","map","ContactsListItem","contactToUpdate","updatedContact","setUpdatedContact","updateContact","getContacts","isLoggedIn","isAddContactModalOpen","global","isUpdateContactModalOpen","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","Header","Dialog","open","onClose","AddContactForm","UpdateContactForm","ContactsList","position","bottom","right","AddCircleRoundedIcon","Navigate","to","replace"],"sourceRoot":""}