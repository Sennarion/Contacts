{"version":3,"file":"static/js/296.7d0b4a26.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.tsx","pages/Login/Login.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { useAppDispatch } from 'hooks';\nimport { login } from 'redux/auth/operations';\nimport { ILoginCredentials } from 'types/types';\nimport { Button, TextField, Stack } from '@mui/material';\n\nconst LoginForm: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const [user, setUser] = useState<ILoginCredentials>({\n    email: '',\n    password: '',\n  });\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setUser(prev => {\n      return { ...prev, [e.target.name]: e.target.value };\n    });\n  };\n\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    dispatch(login(user));\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Stack spacing={2}>\n        <TextField\n          type=\"email\"\n          name=\"email\"\n          label=\"Email Address\"\n          variant=\"outlined\"\n          size=\"small\"\n          fullWidth\n          value={user.email}\n          onChange={onChange}\n          required\n        />\n        <TextField\n          type=\"password\"\n          name=\"password\"\n          label=\"Password\"\n          variant=\"outlined\"\n          size=\"small\"\n          fullWidth\n          value={user.password}\n          onChange={onChange}\n          required\n        />\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\n          Sign in\n        </Button>\n      </Stack>\n    </form>\n  );\n};\n\nexport default LoginForm;\n","import { useState } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAppSelector } from 'hooks';\nimport LoginForm from 'components/LoginForm/LoginForm';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Link,\n  Typography,\n  Box,\n  Stack,\n  Snackbar,\n  Alert,\n  AlertTitle,\n} from '@mui/material';\nimport PersonRoundedIcon from '@mui/icons-material/PersonRounded';\n\nconst Login: React.FC = () => {\n  const [isSnackBarOpen, setIsSnackBarOpen] = useState(true);\n\n  const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn);\n\n  if (isLoggedIn) {\n    return <Navigate to=\"/contacts\" replace />;\n  }\n\n  return (\n    <Box\n      minHeight=\"100vh\"\n      minWidth=\"100%\"\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Stack\n        p={4}\n        borderRadius={2}\n        spacing={2}\n        boxShadow={{ sm: 2 }}\n        width={{ xs: 340, sm: 400 }}\n      >\n        <Stack spacing={2} alignItems=\"center\">\n          <PersonRoundedIcon\n            color=\"primary\"\n            sx={{ width: '80px', height: '80px' }}\n          />\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign In\n          </Typography>\n        </Stack>\n        <Stack spacing={2}>\n          <LoginForm />\n          <Typography align=\"center\">\n            <Typography component=\"span\" mr={1}>\n              Don't have an account?\n            </Typography>\n            <Link component={RouterLink} to=\"/register\">\n              Sign Up\n            </Link>\n          </Typography>\n        </Stack>\n      </Stack>\n      <Snackbar open={isSnackBarOpen}>\n        <Alert\n          severity=\"info\"\n          variant=\"filled\"\n          onClose={() => setIsSnackBarOpen(false)}\n        >\n          <AlertTitle>Welcome!</AlertTitle>\n          <p>\n            If you're feeling lazy to register, you can use a public account to\n            log in:\n          </p>\n          <p>Email: testaccount@mail.com</p>\n          <p>Password: testtest12</p>\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\nexport default Login;\n"],"names":["dispatch","useAppDispatch","_useState","useState","email","password","_useState2","_slicedToArray","user","setUser","onChange","e","prev","_objectSpread","_defineProperty","target","name","value","_jsx","onSubmit","preventDefault","login","children","_jsxs","Stack","spacing","TextField","type","label","variant","size","fullWidth","required","Button","color","isSnackBarOpen","setIsSnackBarOpen","useAppSelector","state","auth","isLoggedIn","Navigate","to","replace","Box","minHeight","minWidth","display","justifyContent","alignItems","p","borderRadius","boxShadow","sm","width","xs","PersonRoundedIcon","sx","height","Typography","component","LoginForm","align","mr","Link","RouterLink","Snackbar","open","Alert","severity","onClose","AlertTitle"],"sourceRoot":""}